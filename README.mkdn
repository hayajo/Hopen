# NAME

Hopen - Plack based micro web application frameworks.

# SYNOPSIS

In app.psgi

    use Hopen;
    builder { enable_if {$ENV{PLACK_ENV} eq 'development'} 'Debug' }; # != Plack::Builder::builder
    get '/' => sub { render('hello.tt', { time => time }) };
    hopen;

    __DATA__

    @@ hello.mt
    <h1>[% time %]: Hello World</h1>

Run app.psgi

    $ perl app.psgi

# DESCRIPTION

Hopen is yet another micro web application framework
using Plack, Router::Simple, Text::Xslate, and DBI.

## EXAMPLE

### Using tepmlate in DATA section

    use Hopen;
    get '/' => 'index';
    hopen;

    __DATA__

    @@ index
    <h1>(DATA)Hello Hopen</h1>

### Using tepmlate-file

in app.psgi

    use Hopen;
    get '/' => 'eg2.tt';
    hopen;

in view/eg2.tt

    <h1>(FILE)Hello Hopen</h1>

priority: FILE > DATA

### Get params and give args to template

    use Hopen;

    get '/' => sub {
        my ($req) = @_;
        render('index', { name => $req->param('name') || 'anonymous' });
    };
    hopen;

    __DATA__

    @@ index
    <h1>Hello [% name %]</h1>

### Handle post request and parse params from url path

    use Hopen;

    ...;

    get '/:name' => sub {
        my ($req, $args) = @_;
        my $name = $args->{name};
        ...;
    };

    ...;

### Make custom response as JSON

    use Hopen;
    use JSON;

    ...;

    get '/json' => sub {
         my ($req) = @_;
         my $json = JSON::to_json({
             foo => 'FOO',
             bar => 'BAR',
             buz => 'BUZ',
         });
         make_response($json, content_type => 'application/json');
    };

    ...;

### Using Model

DBI based.

    use Hopen;

    set database => [
        'dbi:SQLite:/tmp/hopen.db',  # dsn
        '',                          # username
        '',                          # password
        {},                          # option
    ];

    ...;

    get '/list' => sub {
         my ($req) = @_;
         my $rows = db->selectall_arrayref(
             q{SELECT body FROM message ORDER BY id DESC},
             { Slice => {} },
         );
         render('list', { all => $rows });
    };

    ...;

# AUTHOR

Hayato Imai <hayajo>

# SEE ALSO

[Plack](http://search.cpan.org/perldoc?Plack), [Router::Simple](http://search.cpan.org/perldoc?Router::Simple), [Text::Xslate](http://search.cpan.org/perldoc?Text::Xslate), [DBI](http://search.cpan.org/perldoc?DBI)

[Mojolicious::Lite](http://search.cpan.org/perldoc?Mojolicious::Lite), [Dancer](http://search.cpan.org/perldoc?Dancer), [Hitagi](https://github.com/yusukebe/Hitagi)

# LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.